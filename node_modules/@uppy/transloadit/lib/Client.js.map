{"version":3,"sources":["Client.js"],"names":["fetchWithNetworkError","require","ASSEMBLIES_ENDPOINT","fetchJSON","args","then","response","status","Promise","resolve","reject","setTimeout","ok","serverError","Error","statusText","statusCode","endsWith","json","assembly","error","details","message","assembly_id","err","cause","module","exports","Client","constructor","opts","params","errorReporting","type","instance","url","endpoint","submitError","catch","client","createAssembly","fields","signature","expectedFiles","data","FormData","append","JSON","stringify","Object","keys","forEach","key","URL","service","href","method","headers","body","reserveFile","file","size","encodeURIComponent","assembly_ssl_url","addFile","uploadURL","uploadUrl","filename","name","fieldname","qs","cancelAssembly","getAssemblyStatus","agent","navigator","userAgent"],"mappings":"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","sourcesContent":["const fetchWithNetworkError = require('@uppy/utils/lib/fetchWithNetworkError')\n\nconst ASSEMBLIES_ENDPOINT = '/assemblies'\n\nfunction fetchJSON (...args) {\n  return fetchWithNetworkError(...args).then(response => {\n    if (response.status === 429) {\n      // If the server asks the client to rate limit, reschedule the request 2s later.\n      // TODO: there are several instances of rate limiting accross the code base, having one global one could be useful.\n      return new Promise((resolve, reject) => {\n        setTimeout(() => fetchJSON(...args).then(resolve, reject), 2_000)\n      })\n    }\n\n    if (!response.ok) {\n      const serverError = new Error(response.statusText)\n      serverError.statusCode = response.status\n\n      if (!`${args[0]}`.endsWith(ASSEMBLIES_ENDPOINT)) return Promise.reject(serverError)\n\n      // Failed assembly requests should return a more detailed error in JSON.\n      return response.json().then(assembly => {\n        if (!assembly.error) throw serverError\n\n        const error = new Error(assembly.error)\n        error.details = assembly.message\n        error.assembly = assembly\n        if (assembly.assembly_id) {\n          error.details += ` Assembly ID: ${assembly.assembly_id}`\n        }\n        throw error\n      }, err => {\n        // eslint-disable-next-line no-param-reassign\n        err.cause = serverError\n        throw err\n      })\n    }\n\n    return response.json()\n  })\n}\n\n/**\n * A Barebones HTTP API client for Transloadit.\n */\nmodule.exports = class Client {\n  #headers = {}\n\n  constructor (opts = {}) {\n    this.opts = opts\n\n    if (this.opts.client != null) {\n      this.#headers['Transloadit-Client'] = this.opts.client\n    }\n  }\n\n  /**\n   * Create a new assembly.\n   *\n   * @param {object} options\n   * @param {string|object} options.params\n   * @param {object} options.fields\n   * @param {string} options.signature\n   * @param {number} options.expectedFiles\n   */\n  createAssembly ({\n    params,\n    fields,\n    signature,\n    expectedFiles,\n  }) {\n    const data = new FormData()\n    data.append('params', typeof params === 'string'\n      ? params\n      : JSON.stringify(params))\n    if (signature) {\n      data.append('signature', signature)\n    }\n\n    Object.keys(fields).forEach((key) => {\n      data.append(key, fields[key])\n    })\n    data.append('num_expected_upload_files', expectedFiles)\n\n    const url = new URL(ASSEMBLIES_ENDPOINT, `${this.opts.service}`).href\n    return fetchJSON(url, {\n      method: 'post',\n      headers: this.#headers,\n      body: data,\n    })\n      .catch((err) => this.#reportError(err, { url, type: 'API_ERROR' }))\n  }\n\n  /**\n   * Reserve resources for a file in an Assembly. Then addFile can be used later.\n   *\n   * @param {object} assembly\n   * @param {UppyFile} file\n   */\n  reserveFile (assembly, file) {\n    const size = encodeURIComponent(file.size)\n    const url = `${assembly.assembly_ssl_url}/reserve_file?size=${size}`\n    return fetchJSON(url, { method: 'post', headers: this.#headers })\n      .catch((err) => this.#reportError(err, { assembly, file, url, type: 'API_ERROR' }))\n  }\n\n  /**\n   * Import a remote file to an Assembly.\n   *\n   * @param {object} assembly\n   * @param {UppyFile} file\n   */\n  addFile (assembly, file) {\n    if (!file.uploadURL) {\n      return Promise.reject(new Error('File does not have an `uploadURL`.'))\n    }\n    const size = encodeURIComponent(file.size)\n    const uploadUrl = encodeURIComponent(file.uploadURL)\n    const filename = encodeURIComponent(file.name)\n    const fieldname = 'file'\n\n    const qs = `size=${size}&filename=${filename}&fieldname=${fieldname}&s3Url=${uploadUrl}`\n    const url = `${assembly.assembly_ssl_url}/add_file?${qs}`\n    return fetchJSON(url, { method: 'post', headers: this.#headers })\n      .catch((err) => this.#reportError(err, { assembly, file, url, type: 'API_ERROR' }))\n  }\n\n  /**\n   * Cancel a running Assembly.\n   *\n   * @param {object} assembly\n   */\n  cancelAssembly (assembly) {\n    const url = assembly.assembly_ssl_url\n    return fetchJSON(url, { method: 'delete', headers: this.#headers })\n      .catch((err) => this.#reportError(err, { url, type: 'API_ERROR' }))\n  }\n\n  /**\n   * Get the current status for an assembly.\n   *\n   * @param {string} url The status endpoint of the assembly.\n   */\n  getAssemblyStatus (url) {\n    return fetchJSON(url, { headers: this.#headers })\n      .catch((err) => this.#reportError(err, { url, type: 'STATUS_ERROR' }))\n  }\n\n  submitError (err, { endpoint, instance, assembly } = {}) {\n    const message = err.details\n      ? `${err.message} (${err.details})`\n      : err.message\n\n    return fetchJSON('https://transloaditstatus.com/client_error', {\n      method: 'post',\n      body: JSON.stringify({\n        endpoint,\n        instance,\n        assembly_id: assembly,\n        agent: typeof navigator !== 'undefined' ? navigator.userAgent : '',\n        client: this.opts.client,\n        error: message,\n      }),\n    })\n  }\n\n  #reportError = (err, params) => {\n    if (this.opts.errorReporting === false) {\n      throw err\n    }\n\n    const opts = {\n      type: params.type,\n    }\n    if (params.assembly) {\n      opts.assembly = params.assembly.assembly_id\n      opts.instance = params.assembly.instance\n    }\n    if (params.url) {\n      opts.endpoint = params.url\n    }\n\n    this.submitError(err, opts).catch(() => {\n      // not much we can do then is there\n    })\n\n    throw err\n  }\n}\n"]}