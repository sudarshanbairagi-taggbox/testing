{"version":3,"sources":["Assembly.js"],"names":["Emitter","require","has","NetworkError","fetchWithNetworkError","parseUrl","socketIo","requireSocketIo","ASSEMBLY_UPLOADING","ASSEMBLY_EXECUTING","ASSEMBLY_COMPLETED","statusOrder","isStatus","status","test","indexOf","TransloaditAssembly","constructor","assembly","socket","pollInterval","closed","connect","update","diff","updateStatus","next","close","disconnect","clearInterval","emit","parsed","websocket_url","origin","transports","path","pathname","on","id","assembly_id","file","uploads","push","stepName","result","results","err","Object","assign","Error","message","setInterval","connected","response","assembly_ssl_url","ok","statusText","json","prev","prevStatus","nextStatus","error","nowExecuting","keys","filter","upload","forEach","nextResults","prevResults","n","some","p","undefined","module","exports"],"mappings":"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","sourcesContent":["const Emitter = require('component-emitter')\nconst has = require('@uppy/utils/lib/hasProperty')\nconst NetworkError = require('@uppy/utils/lib/NetworkError')\nconst fetchWithNetworkError = require('@uppy/utils/lib/fetchWithNetworkError')\nconst parseUrl = require('./parseUrl')\n\n// Lazy load socket.io to avoid a console error\n// in IE 10 when the Transloadit plugin is not used.\n// (The console.error call comes from `buffer`. I\n// think we actually don't use that part of socket.io\n// at all…)\nlet socketIo\nfunction requireSocketIo () {\n  // eslint-disable-next-line global-require\n  socketIo ??= require('socket.io-client')\n  return socketIo\n}\n\nconst ASSEMBLY_UPLOADING = 'ASSEMBLY_UPLOADING'\nconst ASSEMBLY_EXECUTING = 'ASSEMBLY_EXECUTING'\nconst ASSEMBLY_COMPLETED = 'ASSEMBLY_COMPLETED'\n\nconst statusOrder = [\n  ASSEMBLY_UPLOADING,\n  ASSEMBLY_EXECUTING,\n  ASSEMBLY_COMPLETED,\n]\n\n/**\n * Check that an assembly status is equal to or larger than some desired status.\n * It checks for things that are larger so that a comparison like this works,\n * when the old assembly status is UPLOADING but the new is FINISHED:\n *\n * !isStatus(oldStatus, ASSEMBLY_EXECUTING) && isStatus(newState, ASSEMBLY_EXECUTING)\n *\n * …so that we can emit the 'executing' event even if the execution step was so\n * fast that we missed it.\n */\nfunction isStatus (status, test) {\n  return statusOrder.indexOf(status) >= statusOrder.indexOf(test)\n}\n\nclass TransloaditAssembly extends Emitter {\n  constructor (assembly) {\n    super()\n\n    // The current assembly status.\n    this.status = assembly\n    // The socket.io connection.\n    this.socket = null\n    // The interval timer for full status updates.\n    this.pollInterval = null\n    // Whether this assembly has been closed (finished or errored)\n    this.closed = false\n  }\n\n  connect () {\n    this.#connectSocket()\n    this.#beginPolling()\n  }\n\n  #onFinished () {\n    this.emit('finished')\n    this.close()\n  }\n\n  #connectSocket () {\n    const parsed = parseUrl(this.status.websocket_url)\n    const socket = requireSocketIo().connect(parsed.origin, {\n      transports: ['websocket'],\n      path: parsed.pathname,\n    })\n\n    socket.on('connect', () => {\n      socket.emit('assembly_connect', {\n        id: this.status.assembly_id,\n      })\n\n      this.emit('connect')\n    })\n\n    socket.on('connect_error', () => {\n      socket.disconnect()\n      this.socket = null\n    })\n\n    socket.on('assembly_finished', () => {\n      this.#onFinished()\n    })\n\n    socket.on('assembly_upload_finished', (file) => {\n      this.emit('upload', file)\n      this.status.uploads.push(file)\n    })\n\n    socket.on('assembly_uploading_finished', () => {\n      this.emit('executing')\n    })\n\n    socket.on('assembly_upload_meta_data_extracted', () => {\n      this.emit('metadata')\n      this.#fetchStatus({ diff: false })\n    })\n\n    socket.on('assembly_result_finished', (stepName, result) => {\n      this.emit('result', stepName, result)\n      if (!this.status.results[stepName]) {\n        this.status.results[stepName] = []\n      }\n      this.status.results[stepName].push(result)\n    })\n\n    socket.on('assembly_error', (err) => {\n      this.#onError(err)\n      // Refetch for updated status code\n      this.#fetchStatus({ diff: false })\n    })\n\n    this.socket = socket\n  }\n\n  #onError (err) {\n    this.emit('error', Object.assign(new Error(err.message), err))\n    this.close()\n  }\n\n  /**\n   * Begin polling for assembly status changes. This sends a request to the\n   * assembly status endpoint every so often, if the socket is not connected.\n   * If the socket connection fails or takes a long time, we won't miss any\n   * events.\n   */\n  #beginPolling () {\n    this.pollInterval = setInterval(() => {\n      if (!this.socket || !this.socket.connected) {\n        this.#fetchStatus()\n      }\n    }, 2000)\n  }\n\n  /**\n   * Reload assembly status. Useful if the socket doesn't work.\n   *\n   * Pass `diff: false` to avoid emitting diff events, instead only emitting\n   * 'status'.\n   */\n  async #fetchStatus ({ diff = true } = {}) {\n    if (this.closed) return\n\n    try {\n      const response = await fetchWithNetworkError(this.status.assembly_ssl_url)\n\n      if (this.closed) return\n\n      // In case of rate-limiting, ignore the error.\n      if (response.status === 429) return\n\n      if (!response.ok) {\n        this.#onError(new NetworkError(response.statusText))\n        return\n      }\n\n      const status = await response.json()\n      // Avoid updating if we closed during this request's lifetime.\n      if (this.closed) return\n      this.emit('status', status)\n\n      if (diff) {\n        this.updateStatus(status)\n      } else {\n        this.status = status\n      }\n    } catch (err) {\n      this.#onError(err)\n    }\n  }\n\n  update () {\n    return this.#fetchStatus({ diff: true })\n  }\n\n  /**\n   * Update this assembly's status with a full new object. Events will be\n   * emitted for status changes, new files, and new results.\n   *\n   * @param {object} next The new assembly status object.\n   */\n  updateStatus (next) {\n    this.#diffStatus(this.status, next)\n    this.status = next\n  }\n\n  /**\n   * Diff two assembly statuses, and emit the events necessary to go from `prev`\n   * to `next`.\n   *\n   * @param {object} prev The previous assembly status.\n   * @param {object} next The new assembly status.\n   */\n  #diffStatus (prev, next) {\n    const prevStatus = prev.ok\n    const nextStatus = next.ok\n\n    if (next.error && !prev.error) {\n      return this.#onError(next)\n    }\n\n    // Desired emit order:\n    //  - executing\n    //  - (n × upload)\n    //  - metadata\n    //  - (m × result)\n    //  - finished\n    // The below checks run in this order, that way even if we jump from\n    // UPLOADING straight to FINISHED all the events are emitted as expected.\n\n    const nowExecuting = isStatus(nextStatus, ASSEMBLY_EXECUTING)\n      && !isStatus(prevStatus, ASSEMBLY_EXECUTING)\n    if (nowExecuting) {\n      // Without WebSockets, this is our only way to tell if uploading finished.\n      // Hence, we emit this just before the 'upload's and before the 'metadata'\n      // event for the most intuitive ordering, corresponding to the _usual_\n      // ordering (if not guaranteed) that you'd get on the WebSocket.\n      this.emit('executing')\n    }\n\n    // Find new uploaded files.\n    Object.keys(next.uploads)\n      .filter((upload) => !has(prev.uploads, upload))\n      .forEach((upload) => {\n        this.emit('upload', next.uploads[upload])\n      })\n\n    if (nowExecuting) {\n      this.emit('metadata')\n    }\n\n    // Find new results.\n    Object.keys(next.results).forEach((stepName) => {\n      const nextResults = next.results[stepName]\n      const prevResults = prev.results[stepName]\n\n      nextResults\n        .filter((n) => !prevResults || !prevResults.some((p) => p.id === n.id))\n        .forEach((result) => {\n          this.emit('result', stepName, result)\n        })\n    })\n\n    if (isStatus(nextStatus, ASSEMBLY_COMPLETED)\n        && !isStatus(prevStatus, ASSEMBLY_COMPLETED)) {\n      this.emit('finished')\n    }\n\n    return undefined\n  }\n\n  /**\n   * Stop updating this assembly.\n   */\n  close () {\n    this.closed = true\n    if (this.socket) {\n      this.socket.disconnect()\n      this.socket = null\n    }\n    clearInterval(this.pollInterval)\n    this.pollInterval = null\n  }\n}\n\nmodule.exports = TransloaditAssembly\n"]}