{"version":3,"sources":["index.js"],"names":["BasePlugin","require","tus","Provider","RequestClient","Socket","emitSocketProgress","getSocketHost","settle","EventTracker","NetworkError","isNetworkError","RateLimitedQueue","hasProperty","getFingerprint","tusDefaultOptions","endpoint","uploadUrl","metadata","uploadSize","onProgress","onChunkComplete","onSuccess","onError","overridePatchMethod","headers","addRequestId","chunkSize","Infinity","retryDelays","parallelUploads","removeFingerprintOnSuccess","uploadLengthDeferred","uploadDataDuringCreation","module","exports","Tus","constructor","uppy","opts","type","id","title","defaultOptions","useFastRemoteRetry","limit","withCredentials","Error","requests","values","uploaders","Object","create","uploaderEvents","uploaderSockets","handleResetProgress","bind","handleUpload","files","getState","keys","forEach","fileID","tusState","setState","resetUploaderReferences","uploader","abort","remove","close","upload","file","Promise","resolve","reject","queuedRequest","qRequest","emit","uploadOptions","fingerprint","onBeforeRequest","req","xhr","getUnderlyingObject","shouldBeRequeued","done","p","res","run","isPaused","undefined","err","log","originalRequest","bytesUploaded","bytesTotal","onReceiveUploadUrl","url","uploadResp","uploadURL","name","onShouldRetry","status","originalResponse","getStatus","next","rateLimit","value","navigator","onLine","pause","window","addEventListener","resume","once","fn","copyProp","obj","srcProp","destProp","meta","metaFields","Array","isArray","item","Upload","data","start","findPreviousUploads","then","previousUploads","previousUpload","creationTime","resumeFromPreviousUpload","onFileRemove","targetFileID","onPause","onPauseAll","onCancelAll","onResumeAll","error","catch","uploadRemote","assign","remote","serverToken","connectToServerSocket","Client","providerOptions","provider","client","post","body","protocol","size","setFileState","token","getFile","host","companionUrl","socket","target","autoOpen","send","onRetry","isOpen","onRetryAll","on","progressData","errData","message","cause","open","currentFile","cb","uploadFiles","promises","map","i","current","total","length","isRemote","progress","uploadStarted","isRestored","fileIDs","filesToUpload","install","capabilities","resumableUploads","addUploader","uninstall","removeUploader","VERSION"],"mappings":"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","sourcesContent":["const BasePlugin = require('@uppy/core/lib/BasePlugin')\nconst tus = require('tus-js-client')\nconst { Provider, RequestClient, Socket } = require('@uppy/companion-client')\nconst emitSocketProgress = require('@uppy/utils/lib/emitSocketProgress')\nconst getSocketHost = require('@uppy/utils/lib/getSocketHost')\nconst settle = require('@uppy/utils/lib/settle')\nconst EventTracker = require('@uppy/utils/lib/EventTracker')\nconst NetworkError = require('@uppy/utils/lib/NetworkError')\nconst isNetworkError = require('@uppy/utils/lib/isNetworkError')\nconst { RateLimitedQueue } = require('@uppy/utils/lib/RateLimitedQueue')\nconst hasProperty = require('@uppy/utils/lib/hasProperty')\nconst getFingerprint = require('./getFingerprint')\n\n/** @typedef {import('..').TusOptions} TusOptions */\n/** @typedef {import('tus-js-client').UploadOptions} RawTusOptions */\n/** @typedef {import('@uppy/core').Uppy} Uppy */\n/** @typedef {import('@uppy/core').UppyFile} UppyFile */\n/** @typedef {import('@uppy/core').FailedUppyFile<{}>} FailedUppyFile */\n\n/**\n * Extracted from https://github.com/tus/tus-js-client/blob/master/lib/upload.js#L13\n * excepted we removed 'fingerprint' key to avoid adding more dependencies\n *\n * @type {RawTusOptions}\n */\nconst tusDefaultOptions = {\n  endpoint: '',\n\n  uploadUrl: null,\n  metadata: {},\n  uploadSize: null,\n\n  onProgress: null,\n  onChunkComplete: null,\n  onSuccess: null,\n  onError: null,\n\n  overridePatchMethod: false,\n  headers: {},\n  addRequestId: false,\n\n  chunkSize: Infinity,\n  retryDelays: [100, 1000, 3000, 5000],\n  parallelUploads: 1,\n  removeFingerprintOnSuccess: false,\n  uploadLengthDeferred: false,\n  uploadDataDuringCreation: false,\n}\n\n/**\n * Tus resumable file uploader\n */\nmodule.exports = class Tus extends BasePlugin {\n  // eslint-disable-next-line global-require\n  static VERSION = require('../package.json').version\n\n  #retryDelayIterator\n\n  /**\n   * @param {Uppy} uppy\n   * @param {TusOptions} opts\n   */\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = this.opts.id || 'Tus'\n    this.title = 'Tus'\n\n    // set default options\n    const defaultOptions = {\n      useFastRemoteRetry: true,\n      limit: 20,\n      retryDelays: tusDefaultOptions.retryDelays,\n      withCredentials: false,\n    }\n\n    // merge default options with the ones set by user\n    /** @type {import(\"..\").TusOptions} */\n    this.opts = { ...defaultOptions, ...opts }\n\n    if ('autoRetry' in opts) {\n      throw new Error('The `autoRetry` option was deprecated and has been removed.')\n    }\n\n    /**\n     * Simultaneous upload limiting is shared across all uploads with this plugin.\n     *\n     * @type {RateLimitedQueue}\n     */\n    this.requests = new RateLimitedQueue(this.opts.limit)\n    this.#retryDelayIterator = this.opts.retryDelays?.values()\n\n    this.uploaders = Object.create(null)\n    this.uploaderEvents = Object.create(null)\n    this.uploaderSockets = Object.create(null)\n\n    this.handleResetProgress = this.handleResetProgress.bind(this)\n    this.handleUpload = this.handleUpload.bind(this)\n  }\n\n  handleResetProgress () {\n    const files = { ...this.uppy.getState().files }\n    Object.keys(files).forEach((fileID) => {\n      // Only clone the file object if it has a Tus `uploadUrl` attached.\n      if (files[fileID].tus && files[fileID].tus.uploadUrl) {\n        const tusState = { ...files[fileID].tus }\n        delete tusState.uploadUrl\n        files[fileID] = { ...files[fileID], tus: tusState }\n      }\n    })\n\n    this.uppy.setState({ files })\n  }\n\n  /**\n   * Clean up all references for a file's upload: the tus.Upload instance,\n   * any events related to the file, and the Companion WebSocket connection.\n   *\n   * @param {string} fileID\n   */\n  resetUploaderReferences (fileID, opts = {}) {\n    if (this.uploaders[fileID]) {\n      const uploader = this.uploaders[fileID]\n\n      uploader.abort()\n\n      if (opts.abort) {\n        uploader.abort(true)\n      }\n\n      this.uploaders[fileID] = null\n    }\n    if (this.uploaderEvents[fileID]) {\n      this.uploaderEvents[fileID].remove()\n      this.uploaderEvents[fileID] = null\n    }\n    if (this.uploaderSockets[fileID]) {\n      this.uploaderSockets[fileID].close()\n      this.uploaderSockets[fileID] = null\n    }\n  }\n\n  /**\n   * Create a new Tus upload.\n   *\n   * A lot can happen during an upload, so this is quite hard to follow!\n   * - First, the upload is started. If the file was already paused by the time the upload starts, nothing should happen.\n   *   If the `limit` option is used, the upload must be queued onto the `this.requests` queue.\n   *   When an upload starts, we store the tus.Upload instance, and an EventTracker instance that manages the event listeners\n   *   for pausing, cancellation, removal, etc.\n   * - While the upload is in progress, it may be paused or cancelled.\n   *   Pausing aborts the underlying tus.Upload, and removes the upload from the `this.requests` queue. All other state is\n   *   maintained.\n   *   Cancelling removes the upload from the `this.requests` queue, and completely aborts the upload-- the `tus.Upload`\n   *   instance is aborted and discarded, the EventTracker instance is destroyed (removing all listeners).\n   *   Resuming the upload uses the `this.requests` queue as well, to prevent selectively pausing and resuming uploads from\n   *   bypassing the limit.\n   * - After completing an upload, the tus.Upload and EventTracker instances are cleaned up, and the upload is marked as done\n   *   in the `this.requests` queue.\n   * - When an upload completed with an error, the same happens as on successful completion, but the `upload()` promise is\n   *   rejected.\n   *\n   * When working on this function, keep in mind:\n   *  - When an upload is completed or cancelled for any reason, the tus.Upload and EventTracker instances need to be cleaned\n   *    up using this.resetUploaderReferences().\n   *  - When an upload is cancelled or paused, for any reason, it needs to be removed from the `this.requests` queue using\n   *    `queuedRequest.abort()`.\n   *  - When an upload is completed for any reason, including errors, it needs to be marked as such using\n   *    `queuedRequest.done()`.\n   *  - When an upload is started or resumed, it needs to go through the `this.requests` queue. The `queuedRequest` variable\n   *    must be updated so the other uses of it are valid.\n   *  - Before replacing the `queuedRequest` variable, the previous `queuedRequest` must be aborted, else it will keep taking\n   *    up a spot in the queue.\n   *\n   * @param {UppyFile} file for use with upload\n   * @param {number} current file in a queue\n   * @param {number} total number of files in a queue\n   * @returns {Promise<void>}\n   */\n  upload (file) {\n    this.resetUploaderReferences(file.id)\n\n    // Create a new tus upload\n    return new Promise((resolve, reject) => {\n      let queuedRequest\n      let qRequest\n\n      this.uppy.emit('upload-started', file)\n\n      const opts = {\n        ...this.opts,\n        ...(file.tus || {}),\n      }\n\n      if (typeof opts.headers === 'function') {\n        opts.headers = opts.headers(file)\n      }\n\n      /** @type {RawTusOptions} */\n      const uploadOptions = {\n        ...tusDefaultOptions,\n        ...opts,\n      }\n\n      // We override tus fingerprint to uppy’s `file.id`, since the `file.id`\n      // now also includes `relativePath` for files added from folders.\n      // This means you can add 2 identical files, if one is in folder a,\n      // the other in folder b.\n      uploadOptions.fingerprint = getFingerprint(file)\n\n      uploadOptions.onBeforeRequest = (req) => {\n        const xhr = req.getUnderlyingObject()\n        xhr.withCredentials = !!opts.withCredentials\n\n        if (typeof opts.onBeforeRequest === 'function') {\n          opts.onBeforeRequest(req)\n        }\n\n        if (hasProperty(queuedRequest, 'shouldBeRequeued')) {\n          if (!queuedRequest.shouldBeRequeued) return Promise.reject()\n          let done\n          const p = new Promise((res) => { // eslint-disable-line promise/param-names\n            done = res\n          })\n          queuedRequest = this.requests.run(() => {\n            if (file.isPaused) {\n              queuedRequest.abort()\n            }\n            done()\n            return () => {}\n          })\n          return p\n        }\n        return undefined\n      }\n\n      uploadOptions.onError = (err) => {\n        this.uppy.log(err)\n\n        const xhr = err.originalRequest ? err.originalRequest.getUnderlyingObject() : null\n        if (isNetworkError(xhr)) {\n          err = new NetworkError(err, xhr)\n        }\n\n        this.resetUploaderReferences(file.id)\n        queuedRequest.abort()\n\n        this.uppy.emit('upload-error', file, err)\n\n        reject(err)\n      }\n\n      uploadOptions.onProgress = (bytesUploaded, bytesTotal) => {\n        this.onReceiveUploadUrl(file, upload.url)\n        this.uppy.emit('upload-progress', file, {\n          uploader: this,\n          bytesUploaded,\n          bytesTotal,\n        })\n      }\n\n      uploadOptions.onSuccess = () => {\n        const uploadResp = {\n          uploadURL: upload.url,\n        }\n\n        this.resetUploaderReferences(file.id)\n        queuedRequest.done()\n\n        this.uppy.emit('upload-success', file, uploadResp)\n\n        if (upload.url) {\n          this.uppy.log(`Download ${upload.file.name} from ${upload.url}`)\n        }\n\n        resolve(upload)\n      }\n\n      uploadOptions.onShouldRetry = (err) => {\n        const status = err?.originalResponse?.getStatus()\n        if (status === 429) {\n          // HTTP 429 Too Many Requests => to avoid the whole download to fail, pause all requests.\n          if (!this.requests.isPaused) {\n            const next = this.#retryDelayIterator?.next()\n            if (next == null || next.done) {\n              return false\n            }\n            this.requests.rateLimit(next.value)\n          }\n        } else if (status > 400 && status < 500 && status !== 409) {\n          // HTTP 4xx, the server won't send anything, it's doesn't make sense to retry\n          return false\n        } else if (typeof navigator !== 'undefined' && navigator.onLine === false) {\n          // The navigator is offline, let's wait for it to come back online.\n          if (!this.requests.isPaused) {\n            this.requests.pause()\n            window.addEventListener('online', () => {\n              this.requests.resume()\n            }, { once: true })\n          }\n        }\n        queuedRequest.abort()\n        queuedRequest = {\n          shouldBeRequeued: true,\n          abort () {\n            this.shouldBeRequeued = false\n          },\n          done () {\n            throw new Error('Cannot mark a queued request as done: this indicates a bug')\n          },\n          fn () {\n            throw new Error('Cannot run a queued request: this indicates a bug')\n          },\n        }\n        return true\n      }\n\n      const copyProp = (obj, srcProp, destProp) => {\n        if (hasProperty(obj, srcProp) && !hasProperty(obj, destProp)) {\n          obj[destProp] = obj[srcProp]\n        }\n      }\n\n      /** @type {Record<string, string>} */\n      const meta = {}\n      const metaFields = Array.isArray(opts.metaFields)\n        ? opts.metaFields\n        // Send along all fields by default.\n        : Object.keys(file.meta)\n      metaFields.forEach((item) => {\n        meta[item] = file.meta[item]\n      })\n\n      // tusd uses metadata fields 'filetype' and 'filename'\n      copyProp(meta, 'type', 'filetype')\n      copyProp(meta, 'name', 'filename')\n\n      uploadOptions.metadata = meta\n\n      const upload = new tus.Upload(file.data, uploadOptions)\n      this.uploaders[file.id] = upload\n      this.uploaderEvents[file.id] = new EventTracker(this.uppy)\n\n      // eslint-disable-next-line prefer-const\n      qRequest = () => {\n        if (!file.isPaused) {\n          upload.start()\n        }\n        // Don't do anything here, the caller will take care of cancelling the upload itself\n        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be\n        // called when this request is still in the queue, and has not been started yet, too. At\n        // that point this cancellation function is not going to be called.\n        // Also, we need to remove the request from the queue _without_ destroying everything\n        // related to this upload to handle pauses.\n        return () => {}\n      }\n\n      upload.findPreviousUploads().then((previousUploads) => {\n        const previousUpload = previousUploads[0]\n        if (previousUpload) {\n          this.uppy.log(`[Tus] Resuming upload of ${file.id} started at ${previousUpload.creationTime}`)\n          upload.resumeFromPreviousUpload(previousUpload)\n        }\n      })\n\n      queuedRequest = this.requests.run(qRequest)\n\n      this.onFileRemove(file.id, (targetFileID) => {\n        queuedRequest.abort()\n        this.resetUploaderReferences(file.id, { abort: !!upload.url })\n        resolve(`upload ${targetFileID} was removed`)\n      })\n\n      this.onPause(file.id, (isPaused) => {\n        queuedRequest.abort()\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          upload.abort()\n        } else {\n          // Resuming an upload should be queued, else you could pause and then\n          // resume a queued upload to make it skip the queue.\n          queuedRequest = this.requests.run(qRequest)\n        }\n      })\n\n      this.onPauseAll(file.id, () => {\n        queuedRequest.abort()\n        upload.abort()\n      })\n\n      this.onCancelAll(file.id, () => {\n        queuedRequest.abort()\n        this.resetUploaderReferences(file.id, { abort: !!upload.url })\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      this.onResumeAll(file.id, () => {\n        queuedRequest.abort()\n        if (file.error) {\n          upload.abort()\n        }\n        queuedRequest = this.requests.run(qRequest)\n      })\n    }).catch((err) => {\n      this.uppy.emit('upload-error', file, err)\n      throw err\n    })\n  }\n\n  /**\n   * @param {UppyFile} file for use with upload\n   * @param {number} current file in a queue\n   * @param {number} total number of files in a queue\n   * @returns {Promise<void>}\n   */\n  uploadRemote (file) {\n    this.resetUploaderReferences(file.id)\n\n    const opts = { ...this.opts }\n    if (file.tus) {\n      // Install file-specific upload overrides.\n      Object.assign(opts, file.tus)\n    }\n\n    this.uppy.emit('upload-started', file)\n    this.uppy.log(file.remote.url)\n\n    if (file.serverToken) {\n      return this.connectToServerSocket(file)\n    }\n\n    return new Promise((resolve, reject) => {\n      const Client = file.remote.providerOptions.provider ? Provider : RequestClient\n      const client = new Client(this.uppy, file.remote.providerOptions)\n\n      // !! cancellation is NOT supported at this stage yet\n      client.post(file.remote.url, {\n        ...file.remote.body,\n        endpoint: opts.endpoint,\n        uploadUrl: opts.uploadUrl,\n        protocol: 'tus',\n        size: file.data.size,\n        headers: opts.headers,\n        metadata: file.meta,\n      }).then((res) => {\n        this.uppy.setFileState(file.id, { serverToken: res.token })\n        file = this.uppy.getFile(file.id)\n        return this.connectToServerSocket(file)\n      }).then(() => {\n        resolve()\n      }).catch((err) => {\n        this.uppy.emit('upload-error', file, err)\n        reject(err)\n      })\n    })\n  }\n\n  /**\n   * See the comment on the upload() method.\n   *\n   * Additionally, when an upload is removed, completed, or cancelled, we need to close the WebSocket connection. This is\n   * handled by the resetUploaderReferences() function, so the same guidelines apply as in upload().\n   *\n   * @param {UppyFile} file\n   */\n  connectToServerSocket (file) {\n    return new Promise((resolve, reject) => {\n      const token = file.serverToken\n      const host = getSocketHost(file.remote.companionUrl)\n      const socket = new Socket({ target: `${host}/api/${token}`, autoOpen: false })\n      this.uploaderSockets[file.id] = socket\n      this.uploaderEvents[file.id] = new EventTracker(this.uppy)\n\n      let queuedRequest\n\n      this.onFileRemove(file.id, () => {\n        queuedRequest.abort()\n        socket.send('cancel', {})\n        this.resetUploaderReferences(file.id)\n        resolve(`upload ${file.id} was removed`)\n      })\n\n      this.onPause(file.id, (isPaused) => {\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          queuedRequest.abort()\n          socket.send('pause', {})\n        } else {\n          // Resuming an upload should be queued, else you could pause and then\n          // resume a queued upload to make it skip the queue.\n          queuedRequest.abort()\n          queuedRequest = this.requests.run(() => {\n            socket.send('resume', {})\n            return () => {}\n          })\n        }\n      })\n\n      this.onPauseAll(file.id, () => {\n        queuedRequest.abort()\n        socket.send('pause', {})\n      })\n\n      this.onCancelAll(file.id, () => {\n        queuedRequest.abort()\n        socket.send('cancel', {})\n        this.resetUploaderReferences(file.id)\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      this.onResumeAll(file.id, () => {\n        queuedRequest.abort()\n        if (file.error) {\n          socket.send('pause', {})\n        }\n        queuedRequest = this.requests.run(() => {\n          socket.send('resume', {})\n          return () => {}\n        })\n      })\n\n      this.onRetry(file.id, () => {\n        // Only do the retry if the upload is actually in progress;\n        // else we could try to send these messages when the upload is still queued.\n        // We may need a better check for this since the socket may also be closed\n        // for other reasons, like network failures.\n        if (socket.isOpen) {\n          socket.send('pause', {})\n          socket.send('resume', {})\n        }\n      })\n\n      this.onRetryAll(file.id, () => {\n        // See the comment in the onRetry() call\n        if (socket.isOpen) {\n          socket.send('pause', {})\n          socket.send('resume', {})\n        }\n      })\n\n      socket.on('progress', (progressData) => emitSocketProgress(this, progressData, file))\n\n      socket.on('error', (errData) => {\n        const { message } = errData.error\n        const error = Object.assign(new Error(message), { cause: errData.error })\n\n        // If the remote retry optimisation should not be used,\n        // close the socket—this will tell companion to clear state and delete the file.\n        if (!this.opts.useFastRemoteRetry) {\n          this.resetUploaderReferences(file.id)\n          // Remove the serverToken so that a new one will be created for the retry.\n          this.uppy.setFileState(file.id, {\n            serverToken: null,\n          })\n        } else {\n          socket.close()\n        }\n\n        this.uppy.emit('upload-error', file, error)\n        queuedRequest.done()\n        reject(error)\n      })\n\n      socket.on('success', (data) => {\n        const uploadResp = {\n          uploadURL: data.url,\n        }\n\n        this.uppy.emit('upload-success', file, uploadResp)\n        this.resetUploaderReferences(file.id)\n        queuedRequest.done()\n\n        resolve()\n      })\n\n      queuedRequest = this.requests.run(() => {\n        socket.open()\n        if (file.isPaused) {\n          socket.send('pause', {})\n        }\n\n        // Don't do anything here, the caller will take care of cancelling the upload itself\n        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be\n        // called when this request is still in the queue, and has not been started yet, too. At\n        // that point this cancellation function is not going to be called.\n        // Also, we need to remove the request from the queue _without_ destroying everything\n        // related to this upload to handle pauses.\n        return () => {}\n      })\n    })\n  }\n\n  /**\n   * Store the uploadUrl on the file options, so that when Golden Retriever\n   * restores state, we will continue uploading to the correct URL.\n   *\n   * @param {UppyFile} file\n   * @param {string} uploadURL\n   */\n  onReceiveUploadUrl (file, uploadURL) {\n    const currentFile = this.uppy.getFile(file.id)\n    if (!currentFile) return\n    // Only do the update if we didn't have an upload URL yet.\n    if (!currentFile.tus || currentFile.tus.uploadUrl !== uploadURL) {\n      this.uppy.log('[Tus] Storing upload url')\n      this.uppy.setFileState(currentFile.id, {\n        tus: { ...currentFile.tus, uploadUrl: uploadURL },\n      })\n    }\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(string): void} cb\n   */\n  onFileRemove (fileID, cb) {\n    this.uploaderEvents[fileID].on('file-removed', (file) => {\n      if (fileID === file.id) cb(file.id)\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(boolean): void} cb\n   */\n  onPause (fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-pause', (targetFileID, isPaused) => {\n      if (fileID === targetFileID) {\n        // const isPaused = this.uppy.pauseResume(fileID)\n        cb(isPaused)\n      }\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onRetry (fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-retry', (targetFileID) => {\n      if (fileID === targetFileID) {\n        cb()\n      }\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onRetryAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('retry-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onPauseAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('pause-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onCancelAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('cancel-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onResumeAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('resume-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {(UppyFile | FailedUppyFile)[]} files\n   */\n  uploadFiles (files) {\n    const promises = files.map((file, i) => {\n      const current = i + 1\n      const total = files.length\n\n      if ('error' in file && file.error) {\n        return Promise.reject(new Error(file.error))\n      } if (file.isRemote) {\n        // We emit upload-started here, so that it's also emitted for files\n        // that have to wait due to the `limit` option.\n        // Don't double-emit upload-started for Golden Retriever-restored files that were already started\n        if (!file.progress.uploadStarted || !file.isRestored) {\n          this.uppy.emit('upload-started', file)\n        }\n        return this.uploadRemote(file, current, total)\n      }\n      // Don't double-emit upload-started for Golden Retriever-restored files that were already started\n      if (!file.progress.uploadStarted || !file.isRestored) {\n        this.uppy.emit('upload-started', file)\n      }\n      return this.upload(file, current, total)\n    })\n\n    return settle(promises)\n  }\n\n  /**\n   * @param {string[]} fileIDs\n   */\n  handleUpload (fileIDs) {\n    if (fileIDs.length === 0) {\n      this.uppy.log('[Tus] No files to upload')\n      return Promise.resolve()\n    }\n\n    if (this.opts.limit === 0) {\n      this.uppy.log(\n        '[Tus] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/tus/#limit-0',\n        'warning',\n      )\n    }\n\n    this.uppy.log('[Tus] Uploading...')\n    const filesToUpload = fileIDs.map((fileID) => this.uppy.getFile(fileID))\n\n    return this.uploadFiles(filesToUpload)\n      .then(() => null)\n  }\n\n  install () {\n    this.uppy.setState({\n      capabilities: { ...this.uppy.getState().capabilities, resumableUploads: true },\n    })\n    this.uppy.addUploader(this.handleUpload)\n\n    this.uppy.on('reset-progress', this.handleResetProgress)\n  }\n\n  uninstall () {\n    this.uppy.setState({\n      capabilities: { ...this.uppy.getState().capabilities, resumableUploads: false },\n    })\n    this.uppy.removeUploader(this.handleUpload)\n  }\n}\n"]}