{"version":3,"sources":["StatusBar.js"],"names":["h","require","classNames","statusBarStates","calculateProcessingProgress","UploadBtn","RetryBtn","CancelBtn","PauseResumeButton","DoneBtn","ProgressBarProcessing","ProgressBarError","ProgressBarUploading","ProgressBarComplete","STATE_ERROR","STATE_WAITING","STATE_PREPROCESSING","STATE_UPLOADING","STATE_POSTPROCESSING","STATE_COMPLETE","module","exports","StatusBar","props","newFiles","allowNewUpload","isUploadInProgress","isAllPaused","resumableUploads","error","hideUploadButton","hidePauseResumeButton","hideCancelButton","hideRetryButton","recoveredState","uploadState","totalProgress","files","supportsUploadProgress","hideAfterFinish","isSomeGhost","isTargetDOMEl","doneButtonHandler","isUploadStarted","i18n","startUpload","uppy","isAllComplete","showProgressDetails","numUploads","complete","totalSize","totalETA","totalUploadedSize","getProgressValue","progress","mode","value","getIsIndeterminate","getIsHidden","progressValue","isHidden","width","showUploadBtn","showCancelBtn","showPauseResumeBtn","showRetryBtn","showDoneBtn","progressClassNames","statusBarClassNames"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAQC,OAAO,CAAC,QAAD,CAArB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,mBAAD,CAA/B;;AACA,MAAMG,2BAA2B,GAAGH,OAAO,CAAC,+BAAD,CAA3C;;AAEA,MAAM;AACJI,EAAAA,SADI;AAEJC,EAAAA,QAFI;AAGJC,EAAAA,SAHI;AAIJC,EAAAA,iBAJI;AAKJC,EAAAA,OALI;AAMJC,EAAAA,qBANI;AAOJC,EAAAA,gBAPI;AAQJC,EAAAA,oBARI;AASJC,EAAAA;AATI,IAUFZ,OAAO,CAAC,cAAD,CAVX;;AAYA,MAAM;AACJa,EAAAA,WADI;AAEJC,EAAAA,aAFI;AAGJC,EAAAA,mBAHI;AAIJC,EAAAA,eAJI;AAKJC,EAAAA,oBALI;AAMJC,EAAAA;AANI,IAOFhB,eAPJ;AASAiB,MAAM,CAACC,OAAP,GAAiBC,SAAjB;;AAEA,SAASA,SAAT,CAAoBC,KAApB,EAA2B;AACzB,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA,kBAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,gBALI;AAMJC,IAAAA,KANI;AAOJC,IAAAA,gBAPI;AAQJC,IAAAA,qBARI;AASJC,IAAAA,gBATI;AAUJC,IAAAA,eAVI;AAWJC,IAAAA,cAXI;AAYJC,IAAAA,WAZI;AAaJC,IAAAA,aAbI;AAcJC,IAAAA,KAdI;AAeJC,IAAAA,sBAfI;AAgBJC,IAAAA,eAhBI;AAiBJC,IAAAA,WAjBI;AAkBJC,IAAAA,aAlBI;AAmBJC,IAAAA,iBAnBI;AAoBJC,IAAAA,eApBI;AAqBJC,IAAAA,IArBI;AAsBJC,IAAAA,WAtBI;AAuBJC,IAAAA,IAvBI;AAwBJC,IAAAA,aAxBI;AAyBJC,IAAAA,mBAzBI;AA0BJC,IAAAA,UA1BI;AA2BJC,IAAAA,QA3BI;AA4BJC,IAAAA,SA5BI;AA6BJC,IAAAA,QA7BI;AA8BJC,IAAAA;AA9BI,MA+BF9B,KA/BJ;;AAiCA,WAAS+B,gBAAT,GAA6B;AAC3B,YAAQnB,WAAR;AACE,WAAKjB,oBAAL;AACA,WAAKF,mBAAL;AAA0B;AACxB,gBAAMuC,QAAQ,GAAGnD,2BAA2B,CAACiC,KAAD,CAA5C;;AAEA,cAAIkB,QAAQ,CAACC,IAAT,KAAkB,aAAtB,EAAqC;AACnC,mBAAOD,QAAQ,CAACE,KAAT,GAAiB,GAAxB;AACD;;AACD,iBAAOrB,aAAP;AACD;;AACD,WAAKtB,WAAL;AAAkB;AAChB,iBAAO,IAAP;AACD;;AACD,WAAKG,eAAL;AAAsB;AACpB,cAAI,CAACqB,sBAAL,EAA6B;AAC3B,mBAAO,IAAP;AACD;;AACD,iBAAOF,aAAP;AACD;;AACD;AACE,eAAOA,aAAP;AApBJ;AAsBD;;AAED,WAASsB,kBAAT,GAA+B;AAC7B,YAAQvB,WAAR;AACE,WAAKjB,oBAAL;AACA,WAAKF,mBAAL;AAA0B;AACxB,gBAAM;AAAEwC,YAAAA;AAAF,cAAWpD,2BAA2B,CAACiC,KAAD,CAA5C;AACA,iBAAOmB,IAAI,KAAK,eAAhB;AACD;;AACD,WAAKvC,eAAL;AAAsB;AACpB,cAAI,CAACqB,sBAAL,EAA6B;AAC3B,mBAAO,IAAP;AACD;;AACD,iBAAO,KAAP;AACD;;AACD;AACE,eAAO,KAAP;AAbJ;AAeD;;AAED,WAASqB,WAAT,GAAwB;AACtB,QAAIzB,cAAJ,EAAoB;AAClB,aAAO,KAAP;AACD;;AAED,YAAQC,WAAR;AACE,WAAKpB,aAAL;AACE,eAAOe,gBAAgB,IAAIN,QAAQ,KAAK,CAAxC;;AACF,WAAKL,cAAL;AACE,eAAOoB,eAAP;;AACF;AACE,eAAO,KAAP;AANJ;AAQD;;AAED,QAAMqB,aAAa,GAAGN,gBAAgB,EAAtC;AAEA,QAAMO,QAAQ,GAAGF,WAAW,EAA5B;AAEA,QAAMG,KAAK,GAAGF,aAAH,WAAGA,aAAH,GAAoB,GAA/B;AAEA,QAAMG,aAAa,GAAG,CAAClC,KAAD,IACjBL,QADiB,IAEjB,CAACE,kBAFgB,IAGjB,CAACC,WAHgB,IAIjBF,cAJiB,IAKjB,CAACK,gBALN;AAOA,QAAMkC,aAAa,GAAG,CAAChC,gBAAD,IACjBG,WAAW,KAAKpB,aADC,IAEjBoB,WAAW,KAAKhB,cAFrB;AAIA,QAAM8C,kBAAkB,GAAGrC,gBAAgB,IACtC,CAACG,qBADqB,IAEtBI,WAAW,KAAKlB,eAFrB;AAIA,QAAMiD,YAAY,GAAGrC,KAAK,IAAI,CAACkB,aAAV,IAA2B,CAACd,eAAjD;AAEA,QAAMkC,WAAW,GAAGzB,iBAAiB,IAAIP,WAAW,KAAKhB,cAAzD;AAEA,QAAMiD,kBAAkB,GAAGlE,UAAU,CAAC,yBAAD,EAA4B;AAC/D,wBAAoBwD,kBAAkB;AADyB,GAA5B,CAArC;AAIA,QAAMW,mBAAmB,GAAGnE,UAAU,CACpC;AAAE,iBAAauC;AAAf,GADoC,EAEpC,gBAFoC,EAGnC,MAAKN,WAAY,EAHkB,EAIpC;AAAE,kBAAcK;AAAhB,GAJoC,CAAtC;AAOA,SACE;AAAK,IAAA,SAAS,EAAE6B,mBAAhB;AAAqC,mBAAaR;AAAlD,KACE;AACE,IAAA,SAAS,EAAEO,kBADb;AAEE,IAAA,KAAK,EAAE;AAAEN,MAAAA,KAAK,EAAG,GAAEA,KAAM;AAAlB,KAFT;AAGE,IAAA,IAAI,EAAC,aAHP;AAIE,kBAAa,GAAEA,KAAM,GAJvB;AAKE,sBAAiB,GAAEA,KAAM,GAL3B;AAME,qBAAc,GANhB;AAOE,qBAAc,KAPhB;AAQE,qBAAeF;AARjB,IADF,EAYG,CAAC,MAAM;AACN,YAAQzB,WAAR;AACE,WAAKnB,mBAAL;AACA,WAAKE,oBAAL;AACE,eAAO,EAAC,qBAAD;AAAuB,UAAA,QAAQ,EAAEd,2BAA2B,CAACiC,KAAD;AAA5D,UAAP;;AACF,WAAKlB,cAAL;AACE,eAAO,EAAC,mBAAD;AAAqB,UAAA,IAAI,EAAEyB;AAA3B,UAAP;;AACF,WAAK9B,WAAL;AACE,eACE,EAAC,gBAAD;AACE,UAAA,KAAK,EAAEe,KADT;AAEE,UAAA,IAAI,EAAEe,IAFR;AAGE,UAAA,UAAU,EAAEK,UAHd;AAIE,UAAA,QAAQ,EAAEC;AAJZ,UADF;;AAQF,WAAKjC,eAAL;AACE,eACE,EAAC,oBAAD;AACE,UAAA,IAAI,EAAE2B,IADR;AAEE,UAAA,sBAAsB,EAAEN,sBAF1B;AAGE,UAAA,aAAa,EAAEF,aAHjB;AAIE,UAAA,mBAAmB,EAAEY,mBAJvB;AAKE,UAAA,eAAe,EAAEL,eALnB;AAME,UAAA,aAAa,EAAEI,aANjB;AAOE,UAAA,WAAW,EAAEpB,WAPf;AAQE,UAAA,QAAQ,EAAEH,QARZ;AASE,UAAA,UAAU,EAAEyB,UATd;AAUE,UAAA,QAAQ,EAAEC,QAVZ;AAWE,UAAA,iBAAiB,EAAEG,iBAXrB;AAYE,UAAA,SAAS,EAAEF,SAZb;AAaE,UAAA,QAAQ,EAAEC,QAbZ;AAcE,UAAA,WAAW,EAAEP;AAdf,UADF;;AAkBF;AACE,eAAO,IAAP;AAnCJ;AAqCD,GAtCA,GAZH,EAoDE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGX,cAAc,IAAI6B,aAAlB,GACC,EAAC,SAAD;AACE,IAAA,QAAQ,EAAEvC,QADZ;AAEE,IAAA,eAAe,EAAEmB,eAFnB;AAGE,IAAA,cAAc,EAAET,cAHlB;AAIE,IAAA,IAAI,EAAEU,IAJR;AAKE,IAAA,WAAW,EAAEJ,WALf;AAME,IAAA,WAAW,EAAEK,WANf;AAOE,IAAA,WAAW,EAAEV;AAPf,IADD,GAUG,IAXN,EAaG+B,YAAY,GAAG,EAAC,QAAD;AAAU,IAAA,IAAI,EAAEtB,IAAhB;AAAsB,IAAA,IAAI,EAAEE;AAA5B,IAAH,GAA0C,IAbzD,EAeGmB,kBAAkB,GACjB,EAAC,iBAAD;AACE,IAAA,WAAW,EAAEtC,WADf;AAEE,IAAA,IAAI,EAAEiB,IAFR;AAGE,IAAA,aAAa,EAAEG,aAHjB;AAIE,IAAA,gBAAgB,EAAEnB,gBAJpB;AAKE,IAAA,IAAI,EAAEkB;AALR,IADiB,GAQf,IAvBN,EAyBGkB,aAAa,GAAG,EAAC,SAAD;AAAW,IAAA,IAAI,EAAEpB,IAAjB;AAAuB,IAAA,IAAI,EAAEE;AAA7B,IAAH,GAA2C,IAzB3D,EA2BGqB,WAAW,GACV,EAAC,OAAD;AAAS,IAAA,IAAI,EAAEvB,IAAf;AAAqB,IAAA,iBAAiB,EAAEF;AAAxC,IADU,GAER,IA7BN,CApDF,CADF;AAsFD","sourcesContent":["const { h } = require('preact')\nconst classNames = require('classnames')\nconst statusBarStates = require('./StatusBarStates')\nconst calculateProcessingProgress = require('./calculateProcessingProgress')\n\nconst {\n  UploadBtn,\n  RetryBtn,\n  CancelBtn,\n  PauseResumeButton,\n  DoneBtn,\n  ProgressBarProcessing,\n  ProgressBarError,\n  ProgressBarUploading,\n  ProgressBarComplete,\n} = require('./Components')\n\nconst {\n  STATE_ERROR,\n  STATE_WAITING,\n  STATE_PREPROCESSING,\n  STATE_UPLOADING,\n  STATE_POSTPROCESSING,\n  STATE_COMPLETE,\n} = statusBarStates\n\nmodule.exports = StatusBar\n\nfunction StatusBar (props) {\n  const {\n    newFiles,\n    allowNewUpload,\n    isUploadInProgress,\n    isAllPaused,\n    resumableUploads,\n    error,\n    hideUploadButton,\n    hidePauseResumeButton,\n    hideCancelButton,\n    hideRetryButton,\n    recoveredState,\n    uploadState,\n    totalProgress,\n    files,\n    supportsUploadProgress,\n    hideAfterFinish,\n    isSomeGhost,\n    isTargetDOMEl,\n    doneButtonHandler,\n    isUploadStarted,\n    i18n,\n    startUpload,\n    uppy,\n    isAllComplete,\n    showProgressDetails,\n    numUploads,\n    complete,\n    totalSize,\n    totalETA,\n    totalUploadedSize,\n  } = props\n\n  function getProgressValue () {\n    switch (uploadState) {\n      case STATE_POSTPROCESSING:\n      case STATE_PREPROCESSING: {\n        const progress = calculateProcessingProgress(files)\n\n        if (progress.mode === 'determinate') {\n          return progress.value * 100\n        }\n        return totalProgress\n      }\n      case STATE_ERROR: {\n        return null\n      }\n      case STATE_UPLOADING: {\n        if (!supportsUploadProgress) {\n          return null\n        }\n        return totalProgress\n      }\n      default:\n        return totalProgress\n    }\n  }\n\n  function getIsIndeterminate () {\n    switch (uploadState) {\n      case STATE_POSTPROCESSING:\n      case STATE_PREPROCESSING: {\n        const { mode } = calculateProcessingProgress(files)\n        return mode === 'indeterminate'\n      }\n      case STATE_UPLOADING: {\n        if (!supportsUploadProgress) {\n          return true\n        }\n        return false\n      }\n      default:\n        return false\n    }\n  }\n\n  function getIsHidden () {\n    if (recoveredState) {\n      return false\n    }\n\n    switch (uploadState) {\n      case STATE_WAITING:\n        return hideUploadButton || newFiles === 0\n      case STATE_COMPLETE:\n        return hideAfterFinish\n      default:\n        return false\n    }\n  }\n\n  const progressValue = getProgressValue()\n\n  const isHidden = getIsHidden()\n\n  const width = progressValue ?? 100\n\n  const showUploadBtn = !error\n    && newFiles\n    && !isUploadInProgress\n    && !isAllPaused\n    && allowNewUpload\n    && !hideUploadButton\n\n  const showCancelBtn = !hideCancelButton\n    && uploadState !== STATE_WAITING\n    && uploadState !== STATE_COMPLETE\n\n  const showPauseResumeBtn = resumableUploads\n    && !hidePauseResumeButton\n    && uploadState === STATE_UPLOADING\n\n  const showRetryBtn = error && !isAllComplete && !hideRetryButton\n\n  const showDoneBtn = doneButtonHandler && uploadState === STATE_COMPLETE\n\n  const progressClassNames = classNames('uppy-StatusBar-progress', {\n    'is-indeterminate': getIsIndeterminate(),\n  })\n\n  const statusBarClassNames = classNames(\n    { 'uppy-Root': isTargetDOMEl },\n    'uppy-StatusBar',\n    `is-${uploadState}`,\n    { 'has-ghosts': isSomeGhost },\n  )\n\n  return (\n    <div className={statusBarClassNames} aria-hidden={isHidden}>\n      <div\n        className={progressClassNames}\n        style={{ width: `${width}%` }}\n        role=\"progressbar\"\n        aria-label={`${width}%`}\n        aria-valuetext={`${width}%`}\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n        aria-valuenow={progressValue}\n      />\n\n      {(() => {\n        switch (uploadState) {\n          case STATE_PREPROCESSING:\n          case STATE_POSTPROCESSING:\n            return <ProgressBarProcessing progress={calculateProcessingProgress(files)} />\n          case STATE_COMPLETE:\n            return <ProgressBarComplete i18n={i18n} />\n          case STATE_ERROR:\n            return (\n              <ProgressBarError\n                error={error}\n                i18n={i18n}\n                numUploads={numUploads}\n                complete={complete}\n              />\n            )\n          case STATE_UPLOADING:\n            return (\n              <ProgressBarUploading\n                i18n={i18n}\n                supportsUploadProgress={supportsUploadProgress}\n                totalProgress={totalProgress}\n                showProgressDetails={showProgressDetails}\n                isUploadStarted={isUploadStarted}\n                isAllComplete={isAllComplete}\n                isAllPaused={isAllPaused}\n                newFiles={newFiles}\n                numUploads={numUploads}\n                complete={complete}\n                totalUploadedSize={totalUploadedSize}\n                totalSize={totalSize}\n                totalETA={totalETA}\n                startUpload={startUpload}\n              />\n            )\n          default:\n            return null\n        }\n      })()}\n\n      <div className=\"uppy-StatusBar-actions\">\n        {recoveredState || showUploadBtn ? (\n          <UploadBtn\n            newFiles={newFiles}\n            isUploadStarted={isUploadStarted}\n            recoveredState={recoveredState}\n            i18n={i18n}\n            isSomeGhost={isSomeGhost}\n            startUpload={startUpload}\n            uploadState={uploadState}\n          />\n        ) : null}\n\n        {showRetryBtn ? <RetryBtn i18n={i18n} uppy={uppy} /> : null}\n\n        {showPauseResumeBtn ? (\n          <PauseResumeButton\n            isAllPaused={isAllPaused}\n            i18n={i18n}\n            isAllComplete={isAllComplete}\n            resumableUploads={resumableUploads}\n            uppy={uppy}\n          />\n        ) : null}\n\n        {showCancelBtn ? <CancelBtn i18n={i18n} uppy={uppy} /> : null}\n\n        {showDoneBtn ? (\n          <DoneBtn i18n={i18n} doneButtonHandler={doneButtonHandler} />\n        ) : null}\n      </div>\n    </div>\n  )\n}\n"]}